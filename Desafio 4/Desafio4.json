{
  "name": "Desafio 4 - I2A2",
  "nodes": [
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        768,
        1328
      ],
      "id": "d83c712f-1efe-49c1-a877-f62888a85e43",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "numberInputs": 7
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1312,
        1904
      ],
      "id": "1f9b84df-ae08-44e0-b4c2-f563756f11c6",
      "name": "Merge3"
    },
    {
      "parameters": {
        "jsCode": "// ===== apply_plan_v2 (single output) =====\n// Espera 1 item: { plan, competencia, data_by_sheet }\n\nlet plan = $json.plan;\nconst COMP = String($json.competencia ?? \"05/2025\");\nconst dbs  = $json.data_by_sheet || {};\n\n// Parse seguro (planner pode ter devolvido string ou plan.output)\nif (typeof plan === 'string') {\n  try { plan = JSON.parse(plan); } catch (e) { throw new Error('plan string inválido'); }\n}\nif (plan && typeof plan.output === 'string') {\n  try { plan = JSON.parse(plan.output); } catch (e) { /* ignore */ }\n}\nif (!plan || !plan.sheet_mappings) throw new Error('plan.sheet_mappings ausente');\n\n// Garante arrays\nconst asArr = k => Array.isArray(dbs[k]) ? dbs[k] : [];\ndbs.ATIVOS        = asArr('ATIVOS');\ndbs.ADMISSAO      = asArr('ADMISSAO');\ndbs.DESLIGADOS    = asArr('DESLIGADOS');\ndbs.EXTERIOR      = asArr('EXTERIOR');\ndbs.FERIAS        = asArr('FERIAS');\ndbs.AFASTAMENTOS  = asArr('AFASTAMENTOS');\n\n// Utils\nconst onlyDigits = s => (s ?? '').toString().replace(/\\D+/g,'');\nconst canonMat   = s => { const d = onlyDigits(s); return d.replace(/^0+/,'') || null; };\nconst trim       = s => (s==null ? null : s.toString().trim());\nconst up         = s => (s==null ? null : s.toString().trim().toUpperCase());\n\nfunction toISO(s){\n  if (!s && s !== 0) return null;\n  const t = String(s).trim();\n  let m;\n\n  // 1) ISO já formatado\n  if (m = t.match(/^(\\d{4})[\\/\\-](\\d{2})[\\/\\-](\\d{2})$/)) {\n    return `${m[1]}-${m[2]}-${m[3]}`;\n  }\n\n  // 2) D/M/YYYY ou M/D/YYYY (1–2 dígitos)\n  if (m = t.match(/^(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{4})$/)) {\n    const a = Number(m[1]);   // primeiro campo\n    const b = Number(m[2]);   // segundo campo\n    const y = m[3];\n    let dd, mm;\n\n    if (b > 12 && a <= 12) { mm = a; dd = b; }           // M/D/YYYY (claro)\n    else if (a > 12 && b <= 12) { mm = b; dd = a; }      // D/M/YYYY (claro)\n    else { mm = a; dd = b; }                              // ambos <=12 → assume M/D por padrão\n\n    return `${y}-${String(mm).padStart(2,'0')}-${String(dd).padStart(2,'0')}`;\n  }\n\n  // 3) Serial numérico do Excel\n  if (!isNaN(Number(t))) {\n    const base = new Date(Date.UTC(1899, 11, 30)); // base Excel\n    base.setUTCDate(base.getUTCDate() + Number(t));\n    return base.toISOString().slice(0,10);\n  }\n\n  return null;\n}\nfunction daysInMonth(y,m){ return new Date(y, m, 0).getDate(); } // m:1..12\nfunction diffDaysInclusive(aISO,bISO){\n  if (!aISO || !bISO) return 0;\n  const a=new Date(aISO+\"T00:00:00Z\"), b=new Date(bISO+\"T00:00:00Z\");\n  if (b < a) return 0;\n  return Math.floor((b - a)/86400000) + 1;\n}\nfunction normCompetencia(s){\n  const t = (s ?? \"\").toString().trim();\n  if (!t) return COMP;\n  let m;\n  // \"MM/YYYY\" ou \"M/YYYY\"\n  if (m = t.match(/^(\\d{1,2})[\\/\\-](\\d{4})$/)) return `${m[1].padStart(2,'0')}/${m[2]}`;\n  // \"YYYY-MM\" ou \"YYYY/M\"\n  if (m = t.match(/^(\\d{4})[\\/\\-](\\d{1,2})$/)) return `${m[2].padStart(2,'0')}/${m[1]}`;\n  return COMP;\n}\n\n// Regras do plano\nconst mapUF = (sind) => {\n  if (!sind) return null;\n  const S = up(sind);\n  const rules = plan.uf_resolution?.from_sindicato_rules || [];\n  for (const r of rules) if (S.includes(up(r.contains))) return r.uf;\n  return null;\n};\nconst diasUF = plan.compute_rules?.dias_uteis_por_uf || {SP:22,PR:22,RJ:21,RS:21};\nconst valUF  = plan.compute_rules?.valor_por_uf   || {SP:37.5,PR:35,RJ:35,RS:35};\nconst pctEmp = plan.compute_rules?.percentuais?.empresa ?? 0.8;\nconst pctPro = plan.compute_rules?.percentuais?.profissional ?? 0.2;\nconst corte  = plan.compute_rules?.desligamento_corte_dia ?? 15;\n\n// Monta base por matrícula\nconst byMat = new Map();\n\n// ATIVOS\n{\n  const m = plan.sheet_mappings.ATIVOS || {};\n  for (const r of dbs.ATIVOS){\n    const mat = canonMat(r[m.matricula]); if (!mat) continue;\n    byMat.set(mat, {\n      matricula: mat,\n      matricula_raw: trim(r[m.matricula]) || null,\n      cargo: trim(r[m.cargo] ?? null),\n      situacao: trim(r[m.situacao] ?? null),\n      sindicato: trim(r[m.sindicato] ?? null),\n      empresa: trim(r[m.empresa] ?? null),\n    });\n  }\n}\n\n// ADMISSAO\n{\n  const m = plan.sheet_mappings.ADMISSAO || {};\n  for (const r of dbs.ADMISSAO){\n    const mat = canonMat(r[m.matricula]); if (!mat) continue;\n    const row = byMat.get(mat) || { matricula: mat, matricula_raw: trim(r[m.matricula])||null };\n    row.admissao = toISO(r[m.admissao]);\n    byMat.set(mat, row);\n  }\n}\n\n// DESLIGADOS\n{\n  const m = plan.sheet_mappings.DESLIGADOS || {};\n  for (const r of dbs.DESLIGADOS){\n    const mat = canonMat(r[m.matricula]); if (!mat) continue;\n    const row = byMat.get(mat) || { matricula: mat, matricula_raw: trim(r[m.matricula])||null };\n    row.demissao = toISO(r[m.demissao]);\n    row.comunicado = up(r[m.comunicado] || null);\n    byMat.set(mat, row);\n  }\n}\n\n// EXTERIOR\n{\n  const m = plan.sheet_mappings.EXTERIOR || {};\n  const flagCols = m.flag_cols || [];\n  for (const r of dbs.EXTERIOR){\n    const mat = canonMat(r[m.matricula]); if (!mat) continue;\n    const row = byMat.get(mat) || { matricula: mat, matricula_raw: trim(r[m.matricula])||null };\n    row.exterior = flagCols.some(c => r[c] != null && String(r[c]).trim() !== '');\n    byMat.set(mat, row);\n  }\n}\n\n// FÉRIAS (apenas DIAS)\n{\n  const m = plan.sheet_mappings.FERIAS || {};\n  if (m.matricula) {\n    for (const r of dbs.FERIAS){\n      const mat = canonMat(r[m.matricula]); if (!mat) continue;\n      const row = byMat.get(mat) || { matricula: mat };\n      row.ferias = row.ferias || [];\n      const dias = m.ferias_cols?.dias ? Number(String(r[m.ferias_cols.dias]||'').replace(',','.')) : null;\n      row.ferias.push({ inicio:null, fim:null, dias: (dias && !isNaN(dias)) ? dias : null });\n      byMat.set(mat, row);\n    }\n  }\n}\n\n// AFASTAMENTOS (só tipo; sem período)\n{\n  const m = plan.sheet_mappings.AFASTAMENTOS || {};\n  if (m.matricula) {\n    for (const r of dbs.AFASTAMENTOS){\n      const mat = canonMat(r[m.matricula]); if (!mat) continue;\n      const row = byMat.get(mat) || { matricula: mat };\n      row.afastamentos = row.afastamentos || [];\n      const tipo = trim(r[m.afast_cols?.tipo] || '');\n      row.afastamentos.push({ tipo, inicio:null, fim:null });\n      byMat.set(mat, row);\n    }\n  }\n}\n\n// =================== NORMALIZAÇÃO + UF PADRÃO RS ===================\nfor (const row of byMat.values()) {\n  // tenta mapear pela regra; se não houver UF, aplica padrão RS\n  const mapped = row.uf || mapUF(row.sindicato);\n  if (mapped) {\n    row.uf = mapped;\n    row.__uf_default_rs = false;\n  } else {\n    row.uf = 'RS';\n    row.__uf_default_rs = true;   // marcar para observação\n  }\n\n  row.competencia = normCompetencia(row.competencia || COMP);\n  row.exterior = !!row.exterior;\n\n  if (!Array.isArray(row.ferias))       row.ferias = [];\n  if (!Array.isArray(row.afastamentos)) row.afastamentos = [];\n}\n// ===================================================================\n\n// Elegibilidade\nfunction elegivel(row){\n  const afast = Array.isArray(row.afastamentos) ? row.afastamentos : [];\n\n  if (row.cargo && ['DIRETOR','ESTAGIARIO','APRENDIZ'].some(k => up(row.cargo).includes(k)))\n    return { ok:false, motivo:\"Cargo excluído\" };\n\n  if (row.exterior) return { ok:false, motivo:\"Exterior\" };\n\n  if (afast.some(a => up(a?.tipo || '').includes('LICENÇA MATERNIDADE')))\n    return { ok:false, motivo:\"Afastamento\" };\n\n  return { ok:true, motivo:null };\n}\n\n// Dias = base UF * proporção de dias de calendário do mês, menos férias(dias)\nfunction computeDias(row){\n  const baseUF = diasUF[row.uf] ?? null;  // SP/PR=22; RJ/RS=21\n  if (!baseUF) return { dias: 0, motivo: \"UF sem dias_uteis configurado\" };\n\n  const comp = normCompetencia(row.competencia || COMP);\n  const [mmStr, yyyyStr] = comp.split('/');\n  const mm = Number(mmStr), yyyy = Number(yyyyStr);\n  if (!mm || !yyyy) return { dias: 0, motivo: \"Competência inválida\" };\n\n  const totalMes = daysInMonth(yyyy, mm);\n  let inicio = `${yyyy}-${String(mm).padStart(2,'0')}-01`;\n  let fim = new Date(yyyy, mm, 0).toISOString().slice(0,10);\n\n  if (row.admissao && row.admissao > inicio) inicio = row.admissao;\n  if (row.demissao && row.demissao < fim)     fim = row.demissao;\n\n  // regra do dia 15\n  if (row.comunicado === 'OK' && row.demissao) {\n    const dia = Number(row.demissao.slice(8,10));\n    if (dia <= (plan.compute_rules?.desligamento_corte_dia ?? 15)) return { dias: 0, motivo: null };\n  }\n\n  const diasJanela = diffDaysInclusive(inicio, fim);                 // dias corridos\n  let diasEleg = Math.round(baseUF * (diasJanela / totalMes));       // proporcional\n\n  // subtrai férias (dias)\n  let sub = 0;\n  for (const f of row.ferias){ if (f && typeof f.dias === 'number') sub += f.dias; }\n\n  const dias = Math.max(0, Math.min(baseUF, diasEleg - sub));\n  return { dias, motivo: null };\n}\n\n// Monta itens de saída (1 saída só)\nconst out = [];\n\nfor (const row of byMat.values()){\n  if (!row.matricula) continue;\n  // (row.uf já está definido, com RS como fallback)\n\n  const eli  = elegivel(row);\n  const days = eli.ok ? computeDias(row) : { dias: 0, motivo: eli.motivo };\n  const valor_diario = valUF[row.uf] ?? null;\n  const vr_total = (valor_diario!=null) ? (days.dias * valor_diario) : 0;\n  const custo_empresa = +(vr_total * pctEmp).toFixed(2);\n  const desconto_prof = +(vr_total * pctPro).toFixed(2);\n\n  let obs = [];\n  if (row.__uf_default_rs) obs.push(\"UF padrão RS aplicada; revisar\");\n  if (!eli.ok && days.motivo) obs.push(days.motivo);\n  if (row.comunicado === 'OK' && row.demissao){\n    const dia = Number(row.demissao.slice(8,10));\n    if (dia <= corte) obs.push(\"Demissão com OK até dia 15 (dias=0)\");\n    else obs.push(\"Demissão com OK após dia 15 (proporcional)\");\n  }\n\n  const json = {\n    Matricula: row.matricula_raw || row.matricula,\n    \"Admissão\": row.admissao || null,\n    \"Sindicato do Colaborador\": row.sindicato || null,\n    \"Competência\": row.competencia,\n    \"Dias\": days.dias,\n    \"VALOR DIÁRIO\": valor_diario,\n    \"VR TOTAL\": +(vr_total.toFixed(2)),\n    \"Custo empresa\": custo_empresa,\n    \"Desconto profissional\": desconto_prof,\n    \"OBS GERAL\": obs.length ? obs.join(\"; \") : null,\n    uf: row.uf,\n    elegivel: eli.ok,\n    __pendencia__: false   // com UF padrão RS, não deixamos pendência\n  };\n\n  out.push({ json });\n}\n\n// Retorna UM array de objetos (cada objeto tem {json:...})\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2224,
        1696
      ],
      "id": "90393b09-f653-4b75-9874-fc78a5d529bf",
      "name": "Apply plan"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1mCeDQE8Fz7BiZ1a70RYfkhSKx7X4KW8AhzwW1XMUqLY",
          "mode": "list",
          "cachedResultName": "ATIVOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1mCeDQE8Fz7BiZ1a70RYfkhSKx7X4KW8AhzwW1XMUqLY/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 229966841,
          "mode": "list",
          "cachedResultName": "ATIVOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1mCeDQE8Fz7BiZ1a70RYfkhSKx7X4KW8AhzwW1XMUqLY/edit#gid=229966841"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -336,
        1280
      ],
      "id": "8c0dec52-a547-4b14-858c-3b9f3999db3e",
      "name": "Ativos1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "UUSWhzqbE17BlWzt",
          "name": "Renan - Sheets"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1VTskjnFrEhC_kIWK_xNia13oSfFaMxEljYy8vTaXjhU",
          "mode": "list",
          "cachedResultName": "ADMISSÃO ABRIL",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1VTskjnFrEhC_kIWK_xNia13oSfFaMxEljYy8vTaXjhU/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1141275727,
          "mode": "list",
          "cachedResultName": "Planilha1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1VTskjnFrEhC_kIWK_xNia13oSfFaMxEljYy8vTaXjhU/edit#gid=1141275727"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -336,
        1456
      ],
      "id": "90d0d73f-94ab-4c87-afc7-8801d8cd315d",
      "name": "Admissão1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "UUSWhzqbE17BlWzt",
          "name": "Renan - Sheets"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1-k3Mnr7FlelobkvMcn_h1bZEKDeZeiqChVuyGeZpQCM",
          "mode": "list",
          "cachedResultName": "DESLIGADOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1-k3Mnr7FlelobkvMcn_h1bZEKDeZeiqChVuyGeZpQCM/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 737510008,
          "mode": "list",
          "cachedResultName": "DESLIGADOS ",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1-k3Mnr7FlelobkvMcn_h1bZEKDeZeiqChVuyGeZpQCM/edit#gid=737510008"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -336,
        1616
      ],
      "id": "297e3250-5a70-4184-91c4-e6ee6a5a5d19",
      "name": "Desligados1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "UUSWhzqbE17BlWzt",
          "name": "Renan - Sheets"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1eXa5guCDn27j4aYJMPRRnKsy23PFLkvzFquFg93sGkU",
          "mode": "list",
          "cachedResultName": "EXTERIOR",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1eXa5guCDn27j4aYJMPRRnKsy23PFLkvzFquFg93sGkU/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1682721674,
          "mode": "list",
          "cachedResultName": "Planilha1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1eXa5guCDn27j4aYJMPRRnKsy23PFLkvzFquFg93sGkU/edit#gid=1682721674"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -336,
        1792
      ],
      "id": "2727dc2f-c324-4750-9223-fe62d0efcd24",
      "name": "Exterior1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "UUSWhzqbE17BlWzt",
          "name": "Renan - Sheets"
        }
      }
    },
    {
      "parameters": {
        "numberInputs": 7
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        560,
        1296
      ],
      "id": "32c4d518-f27d-414e-b660-b26904625ff7",
      "name": "Merge4"
    },
    {
      "parameters": {
        "jsCode": "const SHEET_NAME = \"ATIVOS\"; // mude em cada nó: ADMISSAO, DESLIGADOS, EXTERIOR, FERIAS, AFASTAMENTOS\nreturn items.map(it => ({ json: { __sheet: SHEET_NAME, ...it.json } }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -48,
        1280
      ],
      "id": "fc6464db-cfac-49d6-a1e1-32f7d7df7ed4",
      "name": "Code8"
    },
    {
      "parameters": {
        "jsCode": "const SHEET_NAME = \"ADMISSAO\"; // mude em cada nó: ADMISSAO, DESLIGADOS, EXTERIOR, FERIAS, AFASTAMENTOS\nreturn items.map(it => ({ json: { __sheet: SHEET_NAME, ...it.json } }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -48,
        1456
      ],
      "id": "09b4bca4-deff-42b4-94ec-191ebd18dfa1",
      "name": "Code9"
    },
    {
      "parameters": {
        "jsCode": "const SHEET_NAME = \"DESLIGADOS\"; // mude em cada nó: ADMISSAO, DESLIGADOS, EXTERIOR, FERIAS, AFASTAMENTOS\nreturn items.map(it => ({ json: { __sheet: SHEET_NAME, ...it.json } }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -48,
        1616
      ],
      "id": "994139fc-52ba-4e25-bc1f-606313898887",
      "name": "Code10"
    },
    {
      "parameters": {
        "jsCode": "const SHEET_NAME = \"EXTERIOR\"; // mude em cada nó: ADMISSAO, DESLIGADOS, EXTERIOR, FERIAS, AFASTAMENTOS\nreturn items.map(it => ({ json: { __sheet: SHEET_NAME, ...it.json } }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -48,
        1792
      ],
      "id": "dd11b132-6f6b-4921-8747-b45275ce07f5",
      "name": "Code11"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1008,
        1504
      ],
      "id": "22dfd4dd-a9b7-4c5c-8eb2-9e3f56f2ed89",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "06R04n3EWtSnODW5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const MAX = 5;  // linhas de amostra\nconst headers = Object.keys(items[0]?.json || {});\nconst rows = items.slice(0, MAX).map(i => i.json);\nreturn [{ json: { __sheet: $json.__sheet || 'UNKNOWN', headers, rows } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        192,
        1616
      ],
      "id": "234ed2be-1f9f-4a67-b120-8fd458da22d3",
      "name": "Code12"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.data }}",
        "options": {
          "systemMessage": "Você é um PLANEJADOR DE INTEGRAÇÃO DE PLANILHAS. SUA TAREFA É SOMENTE PRODUZIR UM “PLANO JSON EXECUTÁVEL”, sem fazer cálculos finais.\n\nINSUMOS: receberei amostras (cabeçalhos + primeiras linhas) das planilhas:\n- ATIVOS.xlsx (campos típicos: MATRICULA, EMPRESA, TITULO DO CARGO, DESC. SITUACAO, Sindicato)\n- FÉRIAS.xlsx (MATRICULA, DIAS DE FÉRIAS e/ou períodos)\n- DESLIGADOS.xlsx (MATRICULA, DATA DEMISSÃO, COMUNICADO DE DESLIGAMENTO)\n- ADMISSÃO ABRIL.xlsx (MATRICULA, Admissão)\n- AFASTAMENTOS.xlsx (MATRICULA, DESC. SITUACAO e datas/retorno se houver)\n- EXTERIOR.xlsx (Cadastro=matrícula, valor/flag/observação)\n- VR MENSAL 05.2025.xlsx (layout, competência)\n- Estágio (MATRICULA, TITULO DO CARGO)\n\nREGRAS DE NEGÓCIO (CONFIG – prevalecem sobre qualquer inferência):\n- Dias úteis por UF/sindicato: PR=22, SP=22, RJ=21, RS=21.\n- Valor diário VR: PR/RJ/RS = 35.00; SP = 37,5.\n- Rateio: Custo empresa = 80%; Desconto profissional = 20%.\n- Exclusões: cargos contendo DIRETOR, ESTAGIARIO, APRENDIZ; afastados (ex.: Licença Maternidade) no mês; exterior.\n- Desligamento: COMUNICADO = “OK” e demissão até dia 15 → não compra; após dia 15 → compra integral do valor.\n- Chave natural: matrícula (pode aparecer como “MATRICULA” ou “Cadastro”).\n\nOBJETIVO: devolver **apenas** um JSON com o “PLANO”, contendo:\n{\n  \"canonical_fields\": [\"matricula\",\"admissao\",\"demissao\",\"comunicado\",\"cargo\",\"situacao\",\"sindicato\",\"uf\",\"empresa\",\"competencia\",\n                      \"ferias[]\",\"afastamentos[]\",\"exterior\"],\n  \"synonyms\": { \"matricula\":[\"MATRICULA\",\"Cadastro\"], \"admissao\":[\"Admissão\"], \"demissao\":[\"DATA DEMISSÃO\"], \"comunicado\":[\"COMUNICADO DE DESLIGAMENTO\"],\n                \"cargo\":[\"TITULO DO CARGO\"], \"situacao\":[\"DESC. SITUACAO\"], \"sindicato\":[\"Sindicato\"], \"empresa\":[\"EMPRESA\"] },\n  \"sheet_mappings\": {\n     \"ATIVOS\": { \"matricula\":\"<col exata>\", \"cargo\":\"<col>\", \"situacao\":\"<col>\", \"sindicato\":\"<col>\", \"empresa\":\"<col>\" },\n     \"ADMISSAO\": { \"matricula\":\"<col>\", \"admissao\":\"<col>\" },\n     \"DESLIGADOS\": { \"matricula\":\"<col>\", \"demissao\":\"<col>\", \"comunicado\":\"<col>\" },\n     \"FERIAS\": { \"matricula\":\"<col>\", \"ferias_cols\": { \"dias\":\"<col ou null>\",\"inicio\":\"<col ou null>\",\"fim\":\"<col ou null>\" } },\n     \"AFASTAMENTOS\": { \"matricula\":\"<col>\", \"afast_cols\": { \"tipo\":\"<col>\",\"inicio\":\"<col ou null>\",\"fim\":\"<col ou null>\" } },\n     \"EXTERIOR\": { \"matricula\":\"<col>\", \"flag_cols\": [\"<lista de colunas que indicam exterior>\"] }\n  },\n  \"join_key\": \"matricula\",\n  \"uf_resolution\": { \"from_sindicato_rules\":[\n       {\"contains\":\"SINDPD SP\",\"uf\":\"SP\"},\n       {\"contains\":\"SINDPPD RS\",\"uf\":\"RS\"},\n       {\"contains\":\"SINDPD RJ\",\"uf\":\"RJ\"},\n       {\"contains\":\"SITEPD PR\",\"uf\":\"PR\"},\n       {\"contains\":\"CURITIBA\",\"uf\":\"PR\"}\n  ]},\n  \"compute_rules\": {\n    \"dias_uteis_por_uf\":{\"SP\":22,\"PR\":22,\"RJ\":21,\"RS\":21},\n    \"valor_por_uf\":{\"SP\":37.5,\"PR\":35,\"RJ\":35,\"RS\":35},\n    \"percentuais\":{\"empresa\":0.8,\"profissional\":0.2},\n    \"desligamento_corte_dia\":15\n  },\n  \"exclusion_rules\": {\n    \"cargo_contains\":[\"DIRETOR\",\"ESTAGIARIO\",\"APRENDIZ\"],\n    \"afastamentos_match\":[\"LICENÇA MATERNIDADE\"],\n    \"exterior_flag\": true\n  },\n  \"evidence\": {\n    \"headers_detected\": { \"<planilha>\": [\"<headers exatos>\"], ... },\n    \"used_columns\": { \"<planilha>\": [\"<colunas usadas>\"], ... },\n    \"unknown_columns\": { \"<planilha>\": [\"<colunas que parecem relevantes mas não existem>\", ...] }\n  },\n  \"quality_thresholds\": {\n    \"max_unmatched_rate_matricula\": 0.05\n  }\n}\n\nRESTRIÇÕES:\n- NÃO invente colunas: “used_columns” só pode conter nomes presentes nos headers.\n- Se não existir coluna, ponha null no mapeamento correspondente e registre em “unknown_columns”.\n- Responda SOMENTE o JSON do plano, sem comentários.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1008,
        1328
      ],
      "id": "09508145-cbea-4569-b756-7fab79d85798",
      "name": "AI planejamento1"
    },
    {
      "parameters": {
        "jsCode": "const MAX = 5;  // linhas de amostra\nconst headers = Object.keys(items[0]?.json || {});\nconst rows = items.slice(0, MAX).map(i => i.json);\nreturn [{ json: { __sheet: $json.__sheet || 'UNKNOWN', headers, rows } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        192,
        1280
      ],
      "id": "ea2606b4-6d3d-4da9-a3c9-f01b384476ba",
      "name": "Amostragem "
    },
    {
      "parameters": {
        "jsCode": "const MAX = 5;  // linhas de amostra\nconst headers = Object.keys(items[0]?.json || {});\nconst rows = items.slice(0, MAX).map(i => i.json);\nreturn [{ json: { __sheet: $json.__sheet || 'UNKNOWN', headers, rows } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        192,
        1456
      ],
      "id": "fcef77a2-47cb-421b-93c7-545539d34275",
      "name": "Amostragem 3"
    },
    {
      "parameters": {
        "jsCode": "const MAX = 5;  // linhas de amostra\nconst headers = Object.keys(items[0]?.json || {});\nconst rows = items.slice(0, MAX).map(i => i.json);\nreturn [{ json: { __sheet: $json.__sheet || 'UNKNOWN', headers, rows } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        192,
        1792
      ],
      "id": "d3329c39-8e33-4445-8dae-bacdf4ec0ae7",
      "name": "Amostragem 5"
    },
    {
      "parameters": {
        "jsCode": "// Recebe o JSON que o Planner retornou (no item atual) e cria { plan, competencia }\nreturn [{\n  json: {\n    plan: $json,          // <-- todo o plano do Planner\n    competencia: \"05/2025\"  // ajuste aqui (ou extraia do VR_MENSAL se preferir)\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1408,
        1440
      ],
      "id": "a6bf970b-7353-4c90-a283-a279097d7071",
      "name": "Wrap plan"
    },
    {
      "parameters": {
        "jsCode": "// Conecte aqui o fluxo ÚNICO onde já estão todas as linhas de ATIVOS/ADMISSAO/DESLIGADOS/EXTERIOR\nconst data = { ATIVOS: [], ADMISSAO: [], DESLIGADOS: [], EXTERIOR: [] , FERIAS: [], AFASTAMENTOS: [], ESTÁGIO: []};\n\nfor (const it of items) {\n  const sh = it.json.__sheet;\n  if (data[sh]) data[sh].push(it.json);\n}\n\n// Emite um ÚNICO item com os datasets chaveados\nreturn [{ json: { data_by_sheet: data } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1552,
        1936
      ],
      "id": "c404e10f-72c6-46a4-8a3f-1e9ba81b0e84",
      "name": "Full pack"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1760,
        1696
      ],
      "id": "2b34fb4b-9d12-4527-8a23-6388d4b69c55",
      "name": "Merge",
      "executeOnce": true
    },
    {
      "parameters": {
        "jsCode": "let plan=null, competencia=null, data_by_sheet=null;\nfor (const it of items) {\n  const j = it.json || {};\n  if (j.plan) { plan = j.plan; competencia = j.competencia || competencia; }\n  if (j.data_by_sheet) data_by_sheet = j.data_by_sheet;\n}\nif (data_by_sheet && !data_by_sheet.FERIAS)       data_by_sheet.FERIAS = [];\nif (data_by_sheet && !data_by_sheet.AFASTAMENTOS) data_by_sheet.AFASTAMENTOS = [];\nif (!plan) throw new Error('Join Plan + Data: \"plan\" ausente.');\nif (!data_by_sheet || !data_by_sheet.ATIVOS) throw new Error('Join Plan + Data: \"data_by_sheet.ATIVOS\" ausente.');\nreturn [{ json: { plan, competencia: competencia || \"05/2025\", data_by_sheet } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1984,
        1696
      ],
      "id": "ccea8627-bf25-448e-ad17-67bb0b7eb386",
      "name": "Join"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1vu3tcBAu07T4dvcRSLK1odn5tKZjD0Y6iYKwfUVxOXc",
          "mode": "list",
          "cachedResultName": "FÉRIAS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vu3tcBAu07T4dvcRSLK1odn5tKZjD0Y6iYKwfUVxOXc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 245255995,
          "mode": "list",
          "cachedResultName": "Planilha1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1vu3tcBAu07T4dvcRSLK1odn5tKZjD0Y6iYKwfUVxOXc/edit#gid=245255995"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -336,
        1984
      ],
      "id": "6e27a28f-10af-41cf-92c4-77b0eef4fce9",
      "name": "Férias",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "UUSWhzqbE17BlWzt",
          "name": "Renan - Sheets"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const SHEET_NAME = \"FERIAS\"; // mude em cada nó: ADMISSAO, DESLIGADOS, EXTERIOR, FERIAS, AFASTAMENTOS\nreturn items.map(it => ({ json: { __sheet: SHEET_NAME, ...it.json } }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -48,
        1984
      ],
      "id": "e61be035-f367-4447-b349-234ee8ba1254",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "const MAX = 5;  // linhas de amostra\nconst headers = Object.keys(items[0]?.json || {});\nconst rows = items.slice(0, MAX).map(i => i.json);\nreturn [{ json: { __sheet: $json.__sheet || 'UNKNOWN', headers, rows } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        192,
        1984
      ],
      "id": "f7c0e4b6-7b63-4409-816c-749c25928ab4",
      "name": "Amostragem 6"
    },
    {
      "parameters": {
        "jsCode": "const SHEET_NAME = \"AFASTAMENTOS\"; // mude em cada nó: ADMISSAO, DESLIGADOS, EXTERIOR, FERIAS, AFASTAMENTOS\nreturn items.map(it => ({ json: { __sheet: SHEET_NAME, ...it.json } }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -48,
        2160
      ],
      "id": "a8e0565a-cad2-45aa-84f5-eb409ed7beb3",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "const MAX = 5;  // linhas de amostra\nconst headers = Object.keys(items[0]?.json || {});\nconst rows = items.slice(0, MAX).map(i => i.json);\nreturn [{ json: { __sheet: $json.__sheet || 'UNKNOWN', headers, rows } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        192,
        2160
      ],
      "id": "6f1cbc42-0817-4a7b-a1a8-2c311675d3a2",
      "name": "Amostragem 7"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "19SC8uQPreNwWU34J3PD6bMK-7SCqms4KAB-vYez5cjQ",
          "mode": "list",
          "cachedResultName": "AFASTAMENTOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/19SC8uQPreNwWU34J3PD6bMK-7SCqms4KAB-vYez5cjQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1885810984,
          "mode": "list",
          "cachedResultName": "Planilha1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/19SC8uQPreNwWU34J3PD6bMK-7SCqms4KAB-vYez5cjQ/edit#gid=1885810984"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -336,
        2160
      ],
      "id": "3857d185-93bd-4a65-8248-9a4758b94a4e",
      "name": "AFASTAMENTOS",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "UUSWhzqbE17BlWzt",
          "name": "Renan - Sheets"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1136,
        1472
      ],
      "id": "1c406984-7949-4f19-b190-de3fa7bc5543",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "VR MENSAL",
        "options": {
          "headerRow": true
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2688,
        1696
      ],
      "id": "6f6f459e-185b-4c81-a103-ca01e58aab24",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1wgV6UH26OiYDfRI8AlS_wHrt30maO5hD6hfUcTe6U68",
          "mode": "list",
          "cachedResultName": "VR MENSAL 05.2025",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1wgV6UH26OiYDfRI8AlS_wHrt30maO5hD6hfUcTe6U68/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1022758040,
          "mode": "list",
          "cachedResultName": "VR MENSAL 05.2025",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1wgV6UH26OiYDfRI8AlS_wHrt30maO5hD6hfUcTe6U68/edit#gid=1022758040"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Matricula": "={{ $json.Matricula }}",
            "Admissão": "={{ $json['Admissão'] }}",
            "Sindicato do Colaborador": "={{ $json['Sindicato do Colaborador'] }}",
            "Competência": "={{ $json['Competência'] }}",
            "Dias": "={{ $json.Dias }}",
            "VALOR DIÁRIO VR": "={{ $json['VALOR DIÁRIO'] }}",
            "TOTAL": "={{ $json['VR TOTAL'] }}",
            "Custo empresa": "={{ $json['Custo empresa'] }}",
            "Desconto profissional": "={{ $json['Desconto profissional'] }}",
            "OBS GERAL": "={{ $json['OBS GERAL'] }}"
          },
          "matchingColumns": [
            "Matricula"
          ],
          "schema": [
            {
              "id": "Matricula",
              "displayName": "Matricula",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Admissão",
              "displayName": "Admissão",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Sindicato do Colaborador",
              "displayName": "Sindicato do Colaborador",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Competência",
              "displayName": "Competência",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Dias",
              "displayName": "Dias",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "VALOR DIÁRIO VR",
              "displayName": "VALOR DIÁRIO VR",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "TOTAL",
              "displayName": "TOTAL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Custo empresa",
              "displayName": "Custo empresa",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Desconto profissional",
              "displayName": "Desconto profissional",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "OBS GERAL",
              "displayName": "OBS GERAL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "uf",
              "displayName": "uf",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "elegivel",
              "displayName": "elegivel",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "__pendencia__",
              "displayName": "__pendencia__",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2608,
        1872
      ],
      "id": "be0d417c-f306-467d-bdea-893adff74b90",
      "name": "Append or update row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "UUSWhzqbE17BlWzt",
          "name": "Renan - Sheets"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "18mSc94Enu4Ztn6LTf20vS7D7di51QimxlMMgdzw8Ifw",
          "mode": "list",
          "cachedResultName": "ESTÁGIO",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/18mSc94Enu4Ztn6LTf20vS7D7di51QimxlMMgdzw8Ifw/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1212701472,
          "mode": "list",
          "cachedResultName": "Planilha1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/18mSc94Enu4Ztn6LTf20vS7D7di51QimxlMMgdzw8Ifw/edit#gid=1212701472"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -336,
        2368
      ],
      "id": "83b4b5a2-9067-4549-8e92-36f611c6a58a",
      "name": "AFASTAMENTOS1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "UUSWhzqbE17BlWzt",
          "name": "Renan - Sheets"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const SHEET_NAME = \"ESTÁGIO\"; // mude em cada nó: ADMISSAO, DESLIGADOS, EXTERIOR, FERIAS, AFASTAMENTOS\nreturn items.map(it => ({ json: { __sheet: SHEET_NAME, ...it.json } }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -48,
        2368
      ],
      "id": "815a2ef6-f37f-427c-b421-e5721cf00ae4",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "const MAX = 5;  // linhas de amostra\nconst headers = Object.keys(items[0]?.json || {});\nconst rows = items.slice(0, MAX).map(i => i.json);\nreturn [{ json: { __sheet: $json.__sheet || 'UNKNOWN', headers, rows } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        192,
        2368
      ],
      "id": "61c8cbc5-8487-461d-8ce9-42b1aef140d8",
      "name": "Amostragem 8"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f7b190d2-c001-4ea2-be89-2650d87e4506",
              "name": "Matricula",
              "value": "={{ $json.Matricula }}",
              "type": "string"
            },
            {
              "id": "ea2c1fce-2679-482c-8ad6-5b9520916739",
              "name": "Admissão",
              "value": "={{ $json['Admissão'] }}",
              "type": "string"
            },
            {
              "id": "7a2cb475-70f7-4fcf-be09-50303c78f546",
              "name": "Sindicato do Colaborador",
              "value": "={{ $json['Sindicato do Colaborador'] }}",
              "type": "string"
            },
            {
              "id": "2ff8f0ae-fe78-4931-8007-2d0f9379907b",
              "name": "Competência",
              "value": "={{ $json['Competência'] }}",
              "type": "string"
            },
            {
              "id": "6f06403d-413b-4609-8479-b39fcdd9543d",
              "name": "Dias",
              "value": "={{ $json.Dias }}",
              "type": "number"
            },
            {
              "id": "cadd2dd7-0349-4e07-9071-b000138b101c",
              "name": "VALOR DIÁRIO",
              "value": "={{ $json['VALOR DIÁRIO'] }}",
              "type": "number"
            },
            {
              "id": "a0b8191d-6f30-4800-9a85-4c655306fe32",
              "name": "VR TOTAL",
              "value": "={{ $json['VR TOTAL'] }}",
              "type": "number"
            },
            {
              "id": "35a94b44-fd12-4e27-86f3-99f4d706bf77",
              "name": "Custo empresa",
              "value": "={{ $json['Custo empresa'] }}",
              "type": "number"
            },
            {
              "id": "4e8864d1-6d6f-4a66-97ab-c0ca44b584dc",
              "name": "Desconto profissional",
              "value": "={{ $json['Desconto profissional'] }}",
              "type": "number"
            },
            {
              "id": "ef469f3c-18c0-481f-b92c-1ce3bbb1b2a7",
              "name": "OBS GERAL",
              "value": "={{ $json['OBS GERAL'] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2480,
        1696
      ],
      "id": "e8e2e7d1-2790-4356-9dd6-2145af60d319",
      "name": "Edit Fields"
    }
  ],
  "pinData": {},
  "connections": {
    "Aggregate": {
      "main": [
        [
          {
            "node": "AI planejamento1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Full pack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ativos1": {
      "main": [
        [
          {
            "node": "Code8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Admissão1": {
      "main": [
        [
          {
            "node": "Code9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Desligados1": {
      "main": [
        [
          {
            "node": "Code10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Exterior1": {
      "main": [
        [
          {
            "node": "Code11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge4": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code8": {
      "main": [
        [
          {
            "node": "Amostragem ",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code9": {
      "main": [
        [
          {
            "node": "Amostragem 3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code10": {
      "main": [
        [
          {
            "node": "Code12",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Code11": {
      "main": [
        [
          {
            "node": "Amostragem 5",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI planejamento1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code12": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "AI planejamento1": {
      "main": [
        [
          {
            "node": "Wrap plan",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Amostragem ": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Amostragem 3": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Amostragem 5": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Full pack": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Wrap plan": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Join",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Join": {
      "main": [
        [
          {
            "node": "Apply plan",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Férias": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Amostragem 6",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Amostragem 7",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 5
          }
        ]
      ]
    },
    "AFASTAMENTOS": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Amostragem 6": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "Amostragem 7": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 5
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Ativos1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Admissão1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Desligados1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Exterior1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Férias",
            "type": "main",
            "index": 0
          },
          {
            "node": "AFASTAMENTOS",
            "type": "main",
            "index": 0
          },
          {
            "node": "AFASTAMENTOS1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apply plan": {
      "main": [
        [
          {
            "node": "Append or update row in sheet",
            "type": "main",
            "index": 0
          },
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append or update row in sheet": {
      "main": [
        []
      ]
    },
    "AFASTAMENTOS1": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Amostragem 8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Amostragem 8": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 6
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 6
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        []
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "023f6f20-43b7-4941-a44b-46a65c016fc1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "e2e400441824b6db24f6af0c9b70e2d924e9d21f9a10e30b8b4be3b81da7dbb1"
  },
  "id": "uyV5bortUhCfhuH2",
  "tags": []
}